name: Reproduce TKN Logs Hang

on:
  workflow_dispatch: # Allows manual triggering
  # push: # Uncomment to run on every push (be mindful of resource usage)
  #   branches:
  #     - main

jobs:
  reproduce-hang:
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Set a reasonable timeout for the entire job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.28.0' # Or desired kubectl version

      - name: Install OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 'latest'

      - name: Install tkn CLI
        run: |
          curl -LO https://github.com/tektoncd/cli/releases/download/v0.41.0/tektoncd-cli-0.41.0_Linux-64bit.deb
          sudo dpkg -i tektoncd-cli-0.41.0_Linux-64bit.deb
          rm tektoncd-cli-0.41.0_Linux-64bit.deb
          tkn version


      - name: Log in to OpenShift Cluster
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OC_SERVER_URL }}
          openshift_token: ${{ secrets.OC_TOKEN }}
          insecure_skip_tls_verify: true # Adjust as per your cluster's TLS setup, remove if not needed

      - name: Create Tekton Resources (Task, Pipeline, PipelineRun)
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: tekton.dev/v1beta1
          kind: Task
          metadata:
            name: echo-and-sleep
          spec:
            params:
              - name: MESSAGE
                type: string
                description: The message to echo
              - name: SLEEP_SECONDS
                type: string
                description: How many seconds to sleep after echoing
                default: "300"
            steps:
              - name: echo
                image: ubuntu
                script: |
                  #!/bin/bash
                  echo "Starting step 'echo': $TASK_MESSAGE"
                env:
                  - name: TASK_MESSAGE
                    value: "$(params.MESSAGE)"
              - name: sleep
                image: ubuntu
                script: | 
                  #!/bin/bash
                  echo "Starting step 'sleep' for $SLEEP_DURATION seconds..."
                  sleep $SLEEP_DURATION
                  echo "Finished sleeping."
                env:
                  - name: SLEEP_DURATION
                    value: "$(params.SLEEP_SECONDS)"
          EOF

          cat <<EOF | kubectl apply -f -
          apiVersion: tekton.dev/v1beta1
          kind: Pipeline
          metadata:
            name: long-running-pipeline
          spec:
              tasks:
                - name: first-task
                  taskRef:
                    name: echo-and-sleep
                  params:
                    - name: MESSAGE
                      value: "This is the first task."
                    - name: SLEP_SECONDS
                      value: "30"

                - name: second-task
                  taskRef:
                    name: echo-and-sleep
                  params:
                    - name: MESSAGE
                      value: "This is the second task, a bit longer."
                    - name: SLEEP_SECONDS
                      value: "300"
                  runAfter:
                    - first-task

                - name: third-task
                  taskRef:
                    name: echo-and-sleep
                  params:
                    - name: MESSAGE
                      value: "This is the third task, a long one."
                    - name: SLEEP_SECONDS
                      value: "300"
                  runAfter:
                    - second-task
          EOF

          PIPELINERUN_NAME=$(kubectl create -f - -o jsonpath='{.metadata.name}' <<EOF
          apiVersion: tekton.dev/v1beta1
          kind: PipelineRun
          metadata:
            generateName: long-running-pipeline-run-
          spec:
            pipelineRef:
              name: long-running-pipeline
          EOF
          )
          echo "PIPELINERUN_NAME=$PIPELINERUN_NAME" >> $GITHUB_ENV
          echo "Started PipelineRun: $PIPELINERUN_NAME"

      - name: Follow PipelineRun Logs
        run: |
          echo "Waiting for PipelineRun $PIPELINERUN_NAME to complete and streaming logs..."
          tkn pipelinerun logs --exit-with-pipelinerun-error -f "$PIPELINERUN_NAME"